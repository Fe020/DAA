#include <stdio.h>
#include <time.h>

typedef struct {
    int u, v, cost;
} edge;

int find(int v, int parent[]) {
    while (parent[v] != v)
        v = parent[v];
    return v;
}

void union_ij(int i, int j, int parent[]) {
    parent[i < j ? j : i] = i < j ? i : j;
}

void kruskal(int n, edge e[], int m) {
    int count = 0, k = 0, i, sum = 0, t[10][2], p, parent[10];

    for (i = 0; i < m - 1; i++) {
        for (int j = 0; j < m - 1 - i; j++) {
            if (e[j].cost > e[j + 1].cost) {
                edge temp = e[j];
                e[j] = e[j + 1];
                e[j + 1] = temp;
            }
        }
    }

    for (i = 0; i < n; i++)
        parent[i] = i;

    p = 0;

    while (count != n - 1) {
        int u = e[p].u, v = e[p].v;
        i = find(u, parent);
        int j = find(v, parent);

        if (i != j) {
            t[k][0] = u;
            t[k][1] = v;
            k++;
            count++;
            sum += e[p].cost;
            union_ij(i, j, parent);
        }

        p++;
    }

    if (count == n - 1) {
        printf("Spanning tree exists\n");
        printf("The spanning tree is as follows:\n");
        for (i = 0; i < n - 1; i++)
            printf("%d %d\t", t[i][0], t[i][1]);
        printf("\nThe cost of the spanning tree is %d\n", sum);
    } else {
        printf("\nSpanning tree does not exist");
    }
}

int main() {
    int n, m;
    double clk;
    clock_t starttime, endtime;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the number of edges: ");
    scanf("%d", &m);

    edge e[20];
    printf("Enter the edge list (u v cost):\n");
    for (int i = 0; i < m; i++)
        scanf("%d %d %d", &e[i].u, &e[i].v, &e[i].cost);

    starttime = clock();
    kruskal(n, e, m);
    endtime = clock();

    clk = (double)(endtime - starttime) / CLOCKS_PER_SEC;
    printf("The time taken is %f\n", clk);

    return 0;
}
