#include <stdio.h>
#include <time.h>

#define MAX 10

int choose(int dist[], int s[], int n) {
    int j = -1, min = 100; // Initialize j to -1 for error handling
    for (int w = 1; w <= n; w++) {
        if (dist[w] < min && s[w] == 0) {
            min = dist[w];
            j = w; // Store the node index with the minimum distance
        }
    }
    return j;
}

void spath(int v, int cost[][MAX], int dist[], int n) {
    int w, u, i, num;
    int s[MAX];
    for (i = 1; i <= n; i++) {
        s[i] = 0;
        dist[i] = 999; // Set initial distance to a large value (infinite)
    }
    dist[v] = 0; // Set the distance of the source node to itself as 0

    for (num = 2; num <= n; num++) { // Start from 2 since we already set the source distance
        u = choose(dist, s, n);
        if (u == -1) {
            printf("Error: Graph contains disconnected nodes.");
            return; // Exit if there's an error (disconnected nodes)
        }
        s[u] = 1;
        for (w = 1; w <= n; w++) {
            if ((dist[u] + cost[u][w]) < dist[w] && !s[w]) {
                dist[w] = dist[u] + cost[u][w];
            }
        }
    }
}

int main() {
    int i, j, cost[MAX][MAX], dist[MAX], n, v;
    double clk;
    clock_t starttime, endtime;

    printf("Enter number of vertices:");
    scanf("%d", &n);

    printf("Enter the cost of adjacency matrix:\n");
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            scanf("%d", &cost[i][j]);
        }
    }

    printf("Enter the source vertex: ");
    scanf("%d", &v);

    starttime = clock();
    spath(v, cost, dist, n);
    endtime = clock();

    printf("Shortest distances from vertex %d:\n", v);
    for (i = 1; i <= n; i++) {
        printf("%d to %d = %d\n", v, i, dist[i]);
    }

    clk = (double)(endtime - starttime) / CLOCKS_PER_SEC;
    printf("The time taken is %f seconds.\n", clk);

    return 0;
}